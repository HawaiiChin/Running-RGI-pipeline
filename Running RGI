from jug import TaskGenerator, bvalue
from jug.utils import jug_execute
import itertools

MAX_SEQ_CHUNKS = 1_000_000

@TaskGenerator
def split_seq_file(faa, tag):
    from rgi.fasta import fasta_iter
    import gzip
    cur_n = MAX_SEQ_CHUNKS + 1
    ix = 0
    out = None
    partials = []
    for h, seq in fasta_iter(faa):
        if cur_n >= MAX_SEQ_CHUNKS:
            partials.append(f'rgi.partials/{tag}.block_{ix:04}.faa.gz')
            out = gzip.open(partials[-1], compresslevel = 1, mode = 'wt')
            cur_n = 0
            ix += 1
        out.write(f'>{h}\n{seq}\n')
        cur_n +=1
    out.close()
    return partials
   
@TaskGenerator
def run_rgi(faa):
    from os import path, unlink, rmdir
    from shutil import move
    rgi_o_dir = faa.replace(' .faa.gz', '.rgi.out')
    jug_execute.f(['rgi', 'dna', '--fasta', faa, '--out', rgi_o_dir])
    oname = faa.replace('faa.gz', 'rgi.tsv.gz')
    move(path.join(rgi_o_dir, 'rgi.out.prediction.gz'), oname)
    rmdir(rgi_o_dir)
    unlink(faa)
    return oname
    
@TaskGenerator
def build_final_table(partials):
    import pandas as pd
    oname = 'rgi.amps.tsv.gz'
    partials = [pd.read_table(p, index_col =0, comment = '#') for p in partials]
    full = pd.concat(partials)
    full.to_csv(oname, sep='\t')
    return oname

splits_metag = split_seq_file('wastewater.faa.gz', 'metag')

partials = []
for faa in itertools.chain.from_iterable([ bvalue(splits_metag)]):
    partials.append(run_rgi(faa))

build_final_table(partials)
